[include]
    path = .gitconfig_home

[includeIf "gitdir:~/work/"]
  path = .gitconfig_work

[includeIf "gitdir:~/kustomize/"]
  path = .gitconfig_work

[includeIf "gitdir:~/anonymous-project/"]
  path = .gitconfig_anno


[user]
    useConfigOnly = true
    #config from conditional include, see https://git-scm.com/docs/git-config#_conditional_includes
    #see https://www.kevinkuszyk.com/2018/12/10/git-tips-6-using-git-with-multiple-email-addresses/

[color]
    ui = true

[core]
#	editor = vim -f
    #pager = $HOME/.yarn/bin/diff-so-fancy | less --tabs=4 -RFX
    autocrlf = false
    quotepath = false
	commitGraph = true

[pager]
    branch = less -RFX
    tag = less -RFX

    diff = delta
    log = delta
    reflog = delta
    show = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    # features = line-numbers
    whitespace-error-style = 22 reverse
    syntax-theme = Dracula
    true-color = always

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none

[diff]
    #tool = meld
    tool = kitty
    renameLimit = 37901
    colorMoved = default

[difftool]
    prompt = false

[difftool "meld"]
    #path = /usr/bin/meld
    cmd = meld $LOCAL $REMOTE

[difftool "bc3"]
    path = /usr/bin/bcompare

[difftool "vimdiff"]
    cmd = gvimdiff $REMOTE $LOCAL $BASE

[difftool "kitty"]
    cmd = kitten diff $LOCAL $REMOTE

[difftool "difft"]
    cmd = difft "$LOCAL" "$REMOTE"

[merge]
    #tool = bc3
    tool = meld

[mergetool]
    prompt = false
    keepbackup = false

[mergetool "bc3"]
    path = /usr/bin/bcompare
    trustExitCode = true

[mergetool "meld"]
    path = /usr/bin/meld
    trustExitCode = true
    keepBackup = false
    #the first is the default
    #cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"
    cmd = meld $LOCAL $MERGED $REMOTE --output $MERGED

[alias]
    co = checkout
    ci = commit
	cc = cz commit
    st = status
    stn = status -uno
    diffw = diff -w
    br = branch
    cp = cherry-pick
    unstage = reset HEAD --
    dt = difftool
    dtd = difftool --dir-diff
    mt = mergetool
    last = log -1 HEAD
    lg1 = log --graph --abbrev-commit --decorate --date-order --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %aN%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --date-order --date=format:'%Y-%m-%d %H:%M:%S %z' --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%ad%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %aN%C(reset)' --all
    lg = !git lg1
    up = "!git remote update -p; git merge --ff-only @{u}"
    zipmod = !git archive -o update.zip HEAD $(git diff --name-only HEAD^)
    dsf = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"
    findandblame = "!f() { git blame $(git log --pretty=%H --diff-filter=AM -1 -- \"$1\") -- \"$1\"; }; f"

    find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
    show-merge = !sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'
    lm = log --use-mailmap
    pushall = !git remote | xargs -L1 git push --all
    cs = commit --signoff
    # https://blog.filippo.io/git-fixup-amending-an-older-commit/
    fixup = "!f() { TARGET=$(git rev-parse \"$1\"); shift; git commit --fixup=$TARGET ${@} && GIT_EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f"
	cl = cz changelog
	ck = cz check

[pull]
	rebase = false
#	rebase = true

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
[filter "dater"]
    smudge = expand_date
    clean = perl -pe \"s/\\\\\\$Date[^\\\\\\$]*\\\\\\$/\\\\\\$Date\\\\\\$/\"
[gc]
    autoDetach = false
	writeCommitGraph = true

[url "git@code.example.com:"]
	insteadOf = https://code.example.com/

# the credential.helper config sequence is important, 
# git will match against it until it get the matched credentials.
# for same hostname credential, organization specific token should goes first
# using org custom config file ~/.git-credentials-org
[credential "https://github.com/my-org/"]
	helper = readonly --file ~/.git-credentials-org

# force use https instead of ssh
# using default config file ~/.git-credentials
[credential]
	helper = readonly

[url "https://github.com/"]
	insteadOf = git@github.com:
[url "https://gitlab.com/"]
	insteadOf = git@gitlab.com:
[url "https://bitbucket.org/"]
	insteadOf = git@bitbucket.org:
[url "https://gitlab.gnome.org/"]
	insteadOf = ssh://git@ssh.gitlab.gnome.org:

[url "https://code.example.com/"]
	insteadOf = ssh://git@code.example.com:2222/

# force use ssh instead of https
#[url "git@github.com:"]
#	insteadOf = https://github.com/


# git config --global url."git@github.com:".insteadOf "https://github.com/"
# https://gist.github.com/Kovrinic/ea5e7123ab5c97d451804ea222ecd78a


# http settings
[http]
	lowSpeedLimit = 0
	lowSpeedTime = 999999
   #proxy = http://127.0.0.1:7070
    sslVerify = false
	postBuffer = 52428800

[commit]
    gpgsign = true

[tag]
    forcesignannotated = true

[gitflow "prefix"]
	feature = feature/
	bugfix = bugfix/
	release = release/
	hotfix = hotfix/
	support = support/
	versiontag = v

[gitflow "branch"]
master = main
develop = develop

[log]
	date = iso
[init]
	defaultBranch = main
[receive]
	advertisePushOptions = true
	procReceiveRefs = refs/for
[fetch]
	prune = true

[maintenance]
	repo = /home/ttys3/.local/share/znap/fzf-tab
	repo = /home/ttys3/.local/share/znap/ohmyzsh
	repo = /home/ttys3/.local/share/znap/z.lua
	repo = /home/ttys3/.local/share/znap/zsh-autocomplete
	repo = /home/ttys3/.local/share/znap/zsh-autosuggestions
	repo = /home/ttys3/.local/share/znap/zsh-completions
	repo = /home/ttys3/.local/share/znap/zsh-snap
	repo = /home/ttys3/.local/share/znap/zsh-syntax-highlighting
	repo = /home/ttys3/.local/share/znap/zsh-history-substring-search
