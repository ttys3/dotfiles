// https://code.visualstudio.com/docs/editor/variables-reference
// run and debug https://code.visualstudio.com/docs/cpp/launch-json-reference
{
    "window.titleBarStyle": "custom",
    "security.workspace.trust.untrustedFiles": "open",
    "editor.fontFamily": "'Iosevka Nerd Font', 'JetBrainsMono Nerd Font', 'monospace', monospace",
    "editor.fontSize": 15,
    "editor.fontWeight": "normal",
    "editor.inlineSuggest.enabled": true,
    "editor.unicodeHighlight.nonBasicASCII": false,
    "editor.unicodeHighlight.ambiguousCharacters": false,
    // ref https://www.arhea.net/posts/2023-08-24-golang-vscode-configuration/
    "editor.formatOnSave": false,
    "editor.formatOnPaste": false,
    "editor.formatOnType": false,
    // remove any code actions that are configured to run on save
    "editor.codeActionsOnSave": [],
    // put a ruler on the editing screen at 128 characters
    "editor.rulers": [160],
    "workbench.colorTheme": "JetBrains New Dark",
    "editor.wordWrap": "on",
    "files.autoSave": "onFocusChange",
    "files.associations": {
        "*.mdx": "markdown",
        "*.toml": "toml"
    },

    // git
    "git.blame.editorDecoration.enabled": true,
    "git.blame.statusBarItem.enabled": true,

    // go specific settings
  "[go]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "golang.go",
        "editor.codeActionsOnSave": {
            // https://stackoverflow.com/questions/60658737/is-it-possible-to-enable-source-organizeimports-without-removal-of-unused-import
            // https://code.visualstudio.com/updates/v1_83#_code-actions-on-save-and-auto-save
            // explicit means do not run the action on Auto Saves from window or focus changes
            "source.organizeImports": "explicit",
            // "source.sortImports" works just like "source.organizeImports" without removing the imports you haven't used yet.
            // "source.sortImports": "explicit",
            "source.fixAll": "explicit"
        }
    },
    // golang
    // ref docs https://code.visualstudio.com/docs/languages/go
    // https://github.com/golang/vscode-go/wiki/debugging
    // https://github.com/golang/tools/blob/master/gopls/doc/settings.md
    // https://github.com/golang/vscode-go/blob/master/docs/settings.md
    "go.inlayHints.assignVariableTypes": true,
    "go.inlayHints.compositeLiteralFields": true,
    "go.inlayHints.compositeLiteralTypes": true,
    "go.inlayHints.constantValues": true,
    "go.inlayHints.functionTypeParameters": true,
    "go.toolsManagement.autoUpdate": true,
    "go.lintTool": "golangci-lint",
    // we need set go.lintOnSav to `workspace`, otherwise golangci-lint only lint cwd
    // see https://github.com/golang/vscode-go/blob/a59ce5a309b8287486ade7707317bd21d941eb27/extension/src/goLint.ts#L115
    "go.lintOnSave": "workspace",
    "go.lintFlags": [
        // Enable only fast linters from enabled linters set (first run won't be fast)
        // Using it in an editor without --fast can freeze your editor https://golangci-lint.run/welcome/integrations/#go-for-visual-studio-code
        "--fast"
    ],
    "go.testFlags": [
        "-v",
        "-count=1"
    ],
    // see https://github.com/golang/vscode-go/blob/master/docs/settings.md#gotestenvfile
    "go.testEnvFile": "${workspaceFolder}/.env",
    "go.testEnvVars": {
        "LOG_LEVEL": "debug"
    },
    "go.editorContextMenuCommands": {
        "removeTags": true,
        "fillStruct": true
    },
    "go.formatTool": "gofumpt",
    "go.inlayHints.rangeVariableTypes": true,
    "go.testExplorer.showDynamicSubtestsInEditor": true,
    // https://github.com/golang/tools/blob/master/gopls/doc/settings.md
    "gopls": {
        "formatting.gofumpt": true,
        "staticcheck": true,
        "ui.semanticTokens": true,
        "ui.completion.usePlaceholders": true
    },

    // rust
    "rust-analyzer.inlayHints.bindingModeHints.enable": true,
    "rust-analyzer.testExplorer": true,
    "rust-analyzer.runnables.extraEnv":  {
        "SQLX_OFFLINE": "true"
    },
    "rust-analyzer.server.extraEnv": {
        "SQLX_OFFLINE": "true"
    },
    "evenBetterToml.formatter.allowedBlankLines": 2,
    "evenBetterToml.formatter.columnWidth": 128,
    // "rust-analyzer.trace.server": "verbose",

    // PHP
    "intelephense.codeLens.parent.enable": true,
    "intelephense.environment.phpVersion": "8.1.31",

    "plantuml.exportFormat": "svg",
    "plantuml.urlFormat": "svg",
    "plantuml.render": "PlantUMLServer",
    "plantuml.server": "https://www.plantuml.com/plantuml",

    // see https://clang.llvm.org/docs/ClangFormatStyleOptions.html
    "clang-format.style": "{ IndentWidth: 4, BasedOnStyle: Mozilla, AlignConsecutiveAssignments: true,  AlignConsecutiveDeclarations: true, ColumnLimit: 160 }",

    // cursor editor specific settings
    "cursor.cpp.disabledLanguages": [
        "scminput"
    ],

    // github copilot
    "github.copilot.editor.enableAutoCompletions": true,
    "github.copilot.enable": {
        "*": true,
        "plaintext": true,
        "markdown": true,
        "scminput": false,
        "yaml": true
    },
    "github.copilot.chat.edits.enabled": true,
    "github.copilot.chat.codeGeneration.useInstructionFiles": true,

    // tabnine
    "tabnine.experimentalAutoImports": true,

    // python
    "[python]": {
        "editor.formatOnType": true
    },
    // "python.autoComplete.extraPaths": [
    //     "${userHome}/.local/lib/python3.13/site-packages/gi-stubs"
    // ],
    // "python.analysis.extraPaths": [
    //     "${userHome}/.local/lib/python3.13/site-packages/gi-stubs"
    // ],

    // toml
    "[toml]": {
        "editor.defaultFormatter": "tamasfe.even-better-toml"
    },

    // yaml
    "yaml.customTags": [
        "!And",
        "!And sequence",
        "!If",
        "!If sequence",
        "!Not",
        "!Not sequence",
        "!Equals",
        "!Equals sequence",
        "!Or",
        "!Or sequence",
        "!FindInMap",
        "!FindInMap sequence",
        "!Base64",
        "!Join",
        "!Join sequence",
        "!Cidr",
        "!Ref",
        "!Sub",
        "!Sub sequence",
        "!GetAtt",
        "!GetAZs",
        "!ImportValue",
        "!ImportValue sequence",
        "!Select",
        "!Select sequence",
        "!Split",
        "!Split sequence"
    ],

    // telemetry
    "telemetry.telemetryLevel": "crash",
    "intelephense.telemetry.enabled": false,
    "redhat.telemetry.enabled": false,
    "aws.telemetry": false,

    // frontmattergen   
    "frontmattergen.enabled": true,
    "frontmattergen.filename.default": "index",
    "frontmattergen.filename.extension": ".mdx",


    "[json]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "[jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "[javascript]": {
        "editor.defaultFormatter": "vscode.typescript-language-features"
    },
    "[html]": {
        "editor.defaultFormatter": "vscode.html-language-features"
    }
}
